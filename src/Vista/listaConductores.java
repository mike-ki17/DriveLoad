
package Vista;
import Controlador.ConductorController;
import java.awt.Component;
import java.util.logging.Level;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class listaConductores extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(listaConductores.class.getName());
     private ConductorController conductorController;
    /**
     * Creates new form listaConductores
     */
    public listaConductores() {
        initComponents();
        this.conductorController = new ConductorController();
        cargarTablaConductores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void cargarTablaConductores() {
        DefaultTableModel modelo = (DefaultTableModel) tableListConductores.getModel();

        SwingUtilities.invokeLater(() -> {
            modelo.setRowCount(0);

            try {
                // Necesitarás un controlador para conductores
                conductorController.cargarConductoresEnTabla(modelo);

                // Configurar la columna de experiencia
                tableListConductores.getColumnModel().getColumn(2).setCellRenderer(
                    new DefaultTableCellRenderer() {
                        @Override
                        public Component getTableCellRendererComponent(
                            JTable table, Object value, boolean isSelected, 
                            boolean hasFocus, int row, int column) {
                            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                            setHorizontalAlignment(SwingConstants.RIGHT);
                            return this;
                        }
                    });

            } catch (Exception e) {
                logger.log(Level.SEVERE, "Error al cargar conductores", e);
                JOptionPane.showMessageDialog(this,
                    "Error al cargar conductores: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableListConductores = new javax.swing.JTable();
        btnELiminar = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();
        btnEditarConductores = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(704, 661));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableListConductores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Licencia", "Experiencia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableListConductores);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, -1, -1));

        btnELiminar.setBackground(new java.awt.Color(255, 0, 51));
        btnELiminar.setForeground(new java.awt.Color(255, 255, 255));
        btnELiminar.setText("ELIMINAR");
        btnELiminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnELiminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnELiminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 550, 120, 50));

        btnMenu.setBackground(new java.awt.Color(0, 0, 0));
        btnMenu.setForeground(new java.awt.Color(255, 255, 255));
        btnMenu.setText("MENU");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });
        jPanel1.add(btnMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 550, 120, 50));

        btnEditarConductores.setBackground(new java.awt.Color(51, 51, 255));
        btnEditarConductores.setForeground(new java.awt.Color(255, 255, 255));
        btnEditarConductores.setText("EDITAR");
        btnEditarConductores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarConductoresActionPerformed(evt);
            }
        });
        jPanel1.add(btnEditarConductores, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 550, 100, 50));

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Conductores Registrados");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 290, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnELiminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnELiminarActionPerformed
        // TODO add your handling code here:
        //        int filaSeleccionada = tableListVehiculos.getSelectedRow();
        //        if(filaSeleccionada >= 0) {
            //            // Obtener placa de la fila seleccionada
            //            String placa = (String) tableListVehiculos.getValueAt(filaSeleccionada, 0);
            //            // Llamar al controlador para eliminar
            //            vehiculoController.eliminarVehiculo(placa);
            //            // Actualizar tabla
            //            cargarTablaVehiculos();
            //        } else {
            //            JOptionPane.showMessageDialog(this, "Seleccione un vehículo para eliminar");
            //        }
        int filaSeleccionada = tableListConductores.getSelectedRow();
        if(filaSeleccionada >= 0) {
            // Confirmar eliminación
            int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Está seguro de eliminar este vehículo?",
                "Confirmar eliminación",
                JOptionPane.YES_NO_OPTION
            );

            if(confirmacion == JOptionPane.YES_OPTION) {
                // Obtener la placa (asumiendo que es la primera columna)
                String placa = tableListConductores.getValueAt(filaSeleccionada, 0).toString();
                // Eliminar a través del controlador
                if(vehiculoController.eliminarVehiculo(placa)) {
                    // Eliminar solo la fila seleccionada
                    ((DefaultTableModel)tableListConductores.getModel()).removeRow(filaSeleccionada);

                    JOptionPane.showMessageDialog(
                        this,
                        "Vehículo eliminado correctamente",
                        "Éxito",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                } else {
                    JOptionPane.showMessageDialog(
                        this,
                        "Error al eliminar el vehículo",
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        } else {
            JOptionPane.showMessageDialog(
                this,
                "Seleccione un vehículo para eliminar",
                "Advertencia",
                JOptionPane.WARNING_MESSAGE
            );
        }
    }//GEN-LAST:event_btnELiminarActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        // TODO add your handling code here:
        VistaIniciar init = new VistaIniciar();
        init.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnEditarConductoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarConductoresActionPerformed
        int filaSeleccionada = tableListConductores.getSelectedRow();
        if (filaSeleccionada >= 0) {
            // Obtener datos de la fila seleccionada
            String placa = tableListConductores.getValueAt(filaSeleccionada, 0).toString();
            String tipo = tableListConductores.getValueAt(filaSeleccionada, 1).toString();
            double capacidad = Double.parseDouble(tableListConductores.getValueAt(filaSeleccionada, 2).toString());

            // Crear y mostrar formulario de edición
            EditarVehiculoDialog dialog = new EditarVehiculoDialog(
                this,
                true,
                placa,
                tipo,
                capacidad,
                vehiculoController
            );
            dialog.setVisible(true);

            // Refrescar tabla después de editar
            cargarTablaVehiculos();
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un vehículo para editar");
        }
    }//GEN-LAST:event_btnEditarConductoresActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new listaConductores().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnELiminar;
    private javax.swing.JButton btnEditarConductores;
    private javax.swing.JButton btnMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableListConductores;
    // End of variables declaration//GEN-END:variables
}
